/*--------------------------------------------------------------

Grid

Based on Boostrap grid, but removed the push and pull. 
And switch to em instead of px, so it is scalable when user change their
broswer default font size.

--------------------------------------------------------------*/

@import "functions/converter";

/*--------------------------------------------------------------
Convert to em
--------------------------------------------------------------*/

$grid-gutter-width : em($grid-gutter-width);

/*--------------------------------------------------------------
Mixins
--------------------------------------------------------------*/

@mixin make-container($gutter: $grid-gutter-width) {
	margin-right: auto;
	margin-left: auto;
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);
	@include clearfix();
}

@mixin make-row($gutter: $grid-gutter-width) {
	margin-left:  ($gutter / -2);
	margin-right: ($gutter / -2);
	@include clearfix();
}

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
	}
	#{$list} {
		position: relative;
		min-height: 1px;
		padding-left:  ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
	}
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-#{$class}-#{$i}";
	}
	#{$list} {
		float: left;
	}
}

@mixin calc-grid-column($index, $class, $type) {
	@if ($type == width) and ($index > 0) {
		.col-#{$class}-#{$index} {
			width: percentage(($index / $grid-columns));
		}
	}
	@if ($type == offset) {
		.col-#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}

@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}

@mixin make-grid($class) {
	@include float-grid-columns($class);
	@include loop-grid-columns($grid-columns, $class, width);
	@include loop-grid-columns($grid-columns, $class, offset);
}


/*--------------------------------------------------------------
CSS
--------------------------------------------------------------*/

*,
*:before,
*:after {
	box-sizing:border-box;
}

.container {
	@include make-container();

	@each $type, $size in $screen-sizes {
		@media (min-width: em($size)) {
			width: em($size);
		}
	}
}

.container-fluid {
	@include make-container();
}

.row {
	@include make-row();
}

@include make-grid-columns();

@each $type, $size in $screen-sizes {
	@media (min-width: em($size)) {
		@include make-grid($type);
	}
}